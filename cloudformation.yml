---
AWSTemplateFormatVersion: '2010-09-09'
Description: A static website with contact form. S3, Cloud Formation, Lambda, SES.
Parameters:
  WebsiteURL:
    Description: The URL of the website
    Type: String
  ParamCertificateARN:
    Description: SSL Certificate for CloudFront
    Type: String
    Default: 'arn:aws:acm:us-east-1:ACCOUNT_ID_HERE:certificate/CERTIFICATE_ID'
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteURL
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Retain
  LambdaContactFormSendEmail:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          console.log("WARNING. This function needs to be replaced by the second part of the deploy process!")
      Description: Send an email in response to a completed contact form
      FunctionName: cloudformation-contact-form-send-email
      Handler: index.handler
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 1
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: "production"
      FunctionName: !Ref LambdaContactFormSendEmail
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - edgelambda.amazonaws.com
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
            Resource: "*"
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${API}.execute-api.${AWS::Region}.amazonaws.com
          Id: api
          CustomOriginConfig:
            OriginProtocolPolicy: https-only #again API-Gateway only supports https
          OriginPath: /prod #name of the deployed stage
        - DomainName: !Sub ${WebsiteURL}.s3-website.${AWS::Region}.amazonaws.com
          Id: websiteCustomOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        Comment: !Sub ${WebsiteURL} infrastructure
        DefaultRootObject: index.html
        Aliases:
        - !Sub ${WebsiteURL}
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
           - GET
           - HEAD
           - OPTIONS
          Compress: 'true'
          TargetOriginId: websiteCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
            Compress: 'true'
            TargetOriginId: websiteCustomOrigin
            PathPattern: /post-contact-form
            SmoothStreaming: 'false'
            TargetOriginId: api #id of the orignin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
        - ErrorCode: '404'
          ResponsePagePath: "/index.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '30'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref ParamCertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      Tags:
        - Key: application
          Value: !Sub ${WebsiteURL}
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Contact Form Email Sender API
      Description: API used for sending emails containing contact form information
      FailOnWarnings: true
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: Contact Form Email Sender API
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 5
        RateLimit: 2
      UsagePlanName: UsagePlan
  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Sub ${API}
      ParentId:
        Fn::GetAtt:
        - API
        - RootResourceId
      PathPart: post-contact-form
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - LambdaContactFormSendEmail
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/post-contact-form"
  ContactFormRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - LambdaContactFormSendEmail
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '"$input.params(''pid'')"'
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Sub ${APIResource}
      RestApiId: !Sub ${API}
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
Outputs:
  URL:
    Description: The URL of cloudfront which you should set as a CNAME/ALIAS in your DNS
    Value: !GetAtt [CloudFrontDistribution, DomainName]
