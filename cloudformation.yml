---
AWSTemplateFormatVersion: '2010-09-09'
Description: A static website with contact form. S3, Cloud Formation, Lambda, SES.
Parameters:
  WebsiteURL:
    Description: The URL of the website
    Type: String
  ParamCertificateARN:
    Description: SSL Certificate for CloudFront
    Type: String
    Default: 'arn:aws:acm:us-east-1:ACCOUNT_ID_HERE:certificate/CERTIFICATE_ID'
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteURL
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    DeletionPolicy: Retain
  LambdaContactFormSendEmail:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          console.log("WARNING. This function needs to be replaced by the second dpart of the deploy!")
      Description: Send an email in response to a completed contact form
      FunctionName: cloudformation-contact-form-send-email
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs14.x
      Timeout: 1
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: "production"
      FunctionName: !Ref LambdaContactFormSendEmail
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
            Resource: "*"
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${WebsiteURL}.s3-website.${AWS::Region}.amazonaws.com
          Id: websiteCustomOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        Comment: !Sub ${WebsiteURL} infrastructure
        DefaultRootObject: index.html
        Aliases:
        - !Sub ${WebsiteURL}
        HttpVersion: http2
        DefaultCacheBehavior:
          Compress: 'true'
          TargetOriginId: websiteCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: true
              LambdaFunctionARN: !Ref LambdaVersion
        CustomErrorResponses:
        - ErrorCode: '404'
          ResponsePagePath: "/index.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '30'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref ParamCertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      Tags:
        - Key: application
          Value: !Sub ${WebsiteURL}
Outputs:
  URL:
    Description: The URL of cloudfront which you should set as a CNAME/ALIAS in your DNS
    Value: !GetAtt [CloudFrontDistribution, DomainName]
